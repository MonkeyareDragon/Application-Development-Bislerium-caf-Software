@page "/Payment/{Id:guid}"
<!-- Inject the NavigationManager Service for page navigation -->
@inject NavigationManager NavManager
@using BisleriumCafé.Data.Models;
@using BisleriumCafé.Data.Services;
@using BisleriumCafé.Data.Utils;
@using Newtonsoft.Json;

<h3>Make Payment</h3>

<!-- EditForm component of blazor for handling form submission and validation -->
<EditForm Model="@payment" OnValidSubmit="@HandlePayment">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="pay-container">
        <label for="Name">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="payment.CustomerName" />

        <label for="Price">Email:</label>
        <InputText id="Email" class="form-control" @bind-Value="payment.Email" />

        <!-- Checkbox for Active Customer -->
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="payment.IsActiveCustomer" />
            <label class="form-check-label" for="IsActiveCustomer">Active Customer</label>
        </div>
    </div>
    <!-- Submit button for saving changes -->
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter] // Parameter to capture the Order Id from the route above /Payment/{Id:guid}
    public Guid id { get; set; }
    
    public MakePayment payment = new MakePayment();

    public void HandlePayment()
    {
        payment.PaymentId = Guid.NewGuid();

        // Retrieve order details based on OrderId
        var orderDetails = OrderServices.RetrieveOrderData().FirstOrDefault(order => order.OrderId == id);

        // Check if orderDetails is not null
        if (orderDetails != null)
        {
            // Update PaymentStatus of the corresponding order
            orderDetails.PaymentStatus = "Paid";
            //OrderServices.SaveOrderDataInJson(orderDetails);

            payment.PurchasesCount = PaymentServices.GetTotalPaymentsCount();

            payment.PaidPrice = orderDetails.TotalPrice;

            int userPaymentsCount = PaymentServices.GetPaymentsCountByEmail(payment.Email);

            // Check the overall payment number
            if (payment.PurchasesCount == 9)
            {
                // Apply 10% discount for 10 total sell
                payment.PaidPrice *= 0.9;
                App.Current.MainPage.DisplayAlert("Hurray!", "Your have 10% discount for our 10 total sell!", "Ok");
            }
            else if (payment.IsActiveCustomer)
            {
                // Apply 10% discount for active members
                payment.PaidPrice *= 0.9;
            }
            else if (userPaymentsCount % 4 == 0)
            {
                // Apply additional discount for every 5th payment of user
                payment.PaidPrice *= 0.9;
                App.Current.MainPage.DisplayAlert("Hurray!", "Your have 10% discount for your 5th purchase!", "Ok");
            }
            payment.Order = new List<AddOrder> { orderDetails };
        }
        payment.PaymentDatetime = DateTime.Now;

        // Save payment data to JSON file
        PaymentServices.SavePaymentDataInJson(payment);
        //Change the stats of the Payment
        PaymentServices.UpdateOrderDataInJson(orderDetails);

        // Reset the form object
        payment = new MakePayment();
        NavManager.NavigateTo("/paymentData");
    }
}