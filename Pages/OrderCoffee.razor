@page "/orders"
@using BisleriumCafé.Data.Models
@using BisleriumCafé.Data.Services
@using BisleriumCafé.Data.Utils
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<h3 class="custom-heading">OrderCoffee</h3>

<div class="container">
    <EditForm Model="@order" OnValidSubmit="@SaveOrder">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="form-group">
            <label for="coffeeName">Coffee Name:</label>
            <select id="coffeeName" @bind="selectedCoffeeId">
                @foreach (var coffeeData in CoffeeServices.RetrieveCoffeeData())
                {
                    <option value="@coffeeData.Id">@coffeeData.CoffeeName - @coffeeData.CoffeePrice</option>
                }
            </select>
        </div>
        <br />
        <div class="form-group">
            <label>Add-ins:</label>
            @foreach (var addinsData in AddInsServices.RetrieveAddInsData())
            {
                <div>
                    <input type="checkbox" @onchange="(e) => AddInsCheckboxChanged(e, addinsData)" />
                    <label for="@addinsData.Id">@addinsData.Name - @addinsData.Price</label>
                </div>
            }
        </div>
        <br />
        <div class="form-group">
            <label>Total Price:</label>
            <span>@CalculateTotalPrice().ToString("C")</span>
        </div>
        <button type="submit" class="btn btn-primary">Save Order</button>
    </EditForm>
</div>

@code {
    private Guid selectedCoffeeId;
    private List<AddIns> selectedAddIns = new List<AddIns>();
    AddOrder order = new AddOrder();

    // Method to calculate the total price of the order
    private double CalculateTotalPrice()
    {
        // Retrieve the price of the selected coffee item
        double coffeePrice = CoffeeServices.RetrieveCoffeeData().FirstOrDefault(c => c.Id == selectedCoffeeId)?.CoffeePrice ?? 0;

        // Calculate the total price by adding the coffee price and the total price of selected add-ins
        double addInsPrice = selectedAddIns.Sum(a => a.Price);

        return coffeePrice + addInsPrice;
    }

    // Method called when the state of an add-ins checkbox changes
    private void AddInsCheckboxChanged(ChangeEventArgs e, AddIns addIns)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            // Add the selected add-ins to the list
            selectedAddIns.Add(addIns);
        }
        else
        {
            // Check if the addIns is already in the list before removing it
            var existingAddIns = selectedAddIns.FirstOrDefault(a => a.Id == addIns.Id);
            if (existingAddIns != null)
            {
                // Remove the add-ins from the list
                selectedAddIns.Remove(existingAddIns);
            }
        }

        // Notify Blazor that the state has changed and it needs to re-render
        StateHasChanged();
    }

    // HandleSubmit method is called on form submission
    private void SaveOrder()
    {
        // Get the selected coffee
        var selectedCoffee = CoffeeServices.RetrieveCoffeeData().FirstOrDefault(c => c.Id == selectedCoffeeId);

        // Set default values for Coffee Name, TotalPrice, PaymentStatus, and OrderDatetime
        order.Coffee = new List<Coffee> { selectedCoffee };
        order.AddIns = selectedAddIns;
        order.TotalPrice = CalculateTotalPrice();
        order.PaymentStatus = "Pending";
        order.OrderDatetime = DateTime.Now;

        // Save form data to JSON file
        OrderServices.SaveOrderDataInJson(order);

        App.Current.MainPage.DisplayAlert("Success", "Your Order for coffee is successfull!", "Ok");
        // Reset the form object
        order = new AddOrder();
    }
}
