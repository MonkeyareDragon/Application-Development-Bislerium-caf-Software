@page "/paymentData"

@using BisleriumCafé.Data.Services
@using BisleriumCafé.Data.Models
@using IronPdf
@using System.Text;
@using System.Collections.Generic;
@using System.Linq;

<h3 class="custom-heading">Payment Data</h3>
<h6>Download the PDF Report.</h6>
<button class="btn btn-primary" @onclick="DownloadPdf">Download</button>
<div class="search-container">
    <input type="text" class="search-input" id="emailSearch" @bind="searchName" placeholder="Search Email">
    <button class="btn btn-primary" @onclick="SearchName">Search</button>
</div>
<div>
<table>
    <thead>
        <tr>
            <th>Customer Name</th>
            <th>Customer Email</th>
            <th>Coffee Name</th>
            <th>Add-Ins</th>
            <th>Payment Status</th>
            <th>Payment: Date and Time</th>
            <th>Total Price</th>
        </tr>
    </thead>
    <tbody>
        <!-- Loop through each payment data -->
        @foreach (var paymentData in filteredPaymentData)
        {
            <tr>
                <!-- Display basic payment data -->
                <td>@paymentData.CustomerName</td>
                <td>@paymentData.Email</td>
                <td>
                    <!-- Check if order exist -->
                    @if (paymentData.Order != null && paymentData.Order.Any())
                    {
                        <!-- Display order in a list -->
                        @foreach (var order in paymentData.Order)
                        {
                            <ul>
                                <!-- Display coffee from order list -->
                                @foreach (var coffee in order.Coffee)
                                {
                                    <li>@coffee.CoffeeName</li>
                                }
                            </ul>
                        }
                      }
                    else
                    {
                        <!-- Display a message if no orders -->
                        <span>No Coffee</span>
                    }
                </td>
                <td>
                    <!-- Check if order exist -->
                    @if (paymentData.Order != null && paymentData.Order.Any())
                    {
                        <!-- Display order in a list -->
                        @foreach (var order in paymentData.Order)
                        {
                            <ul>
                                <!-- Display addins from order list -->
                                @foreach (var addins in order.AddIns)
                                {
                                    <li>@addins.Name</li>
                                }
                            </ul>
                        }
                    }
                    else
                    {
                        <!-- Display a message if no addins -->
                        <span>No Add-Ins</span>
                    }
                </td>
                <td>
                    <!-- Check if order exist -->
                    @if (paymentData.Order != null && paymentData.Order.Any())
                    {
                    <ul>
                            <!-- Display payment status from order list -->
                            @foreach (var order in paymentData.Order)
                            {
                                <li>@order.PaymentStatus</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <!-- Display a message if no payment status -->
                        <span>No Status</span>
                    }
                </td>
                <td>@paymentData.PaymentDatetime</td>
                <td>@paymentData.PaidPrice</td>
                
            </tr>
        }
    </tbody>
</table>
</div>

@code {
    private string searchName = string.Empty;
    private List<MakePayment> filteredPaymentData;

    // Download PDF function
    public void DownloadPdf()
    {
        try
        {
            // Generate HTML content for the PDF report
            var content = DownloadPDFServices.GenerateHtmlReport();

            // Initialize the Chrome PDF renderer
            var pdf = new ChromePdfRenderer();

            // Convert HTML to PDF
            var pdfStream = pdf.RenderHtmlAsPdf(content).Stream;

            // Specify the path where the PDF file will be saved
            string pdfPath = @"C:\Users\18lim\OneDrive\Desktop\Application Development\Window Application\BisleriumCafé\wwwroot\report\";

            // Combine file FormData.pdf with the directory and create the PDF file using FileMode
            using (var fileStream = new System.IO.FileStream(Path.Combine(pdfPath, "Report.pdf"), System.IO.FileMode.Create))
            {
                pdfStream.CopyToAsync(fileStream); // Copying the data of PDF inside the application to the PDF created on your device
            }

            // Show success notification
            App.Current.MainPage.DisplayAlert("Success", "File Downloaded Successfully", "Ok");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    // Initialize the component
    protected override void OnInitialized()
    {
        // Initialize the filteredPaymentData with all payment data initially
        filteredPaymentData = PaymentServices.RetrievePaymentData();
    }

    // Search for payment data based on the entered name
    public void SearchName()
    {
        if (!string.IsNullOrWhiteSpace(searchName))
        {
            // Filter payment data based on the entered name
            filteredPaymentData = PaymentServices.RetrievePaymentData()
                .Where(p => p.CustomerName.Contains(searchName, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            // If the search box is empty, show all payment data
            filteredPaymentData = PaymentServices.RetrievePaymentData();
        }
    }
}
